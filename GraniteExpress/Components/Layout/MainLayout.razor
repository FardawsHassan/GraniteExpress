@inherits LayoutComponentBase
@inject NavigationManager _navigationManager

<MudThemeProvider IsDarkMode=true Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <AuthorizeView>
        <Authorized>
            <MudAppBar>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <MudSpacer />
                <MudButton Variant=Variant.Text Style="color:white;text-transform: capitalize;" OnClick="Logout">Log Out</MudButton>
            </MudAppBar>
            <MudAppBar Bottom="true" Fixed="true" Elevation="1">
                <MudItem Class="d-flex flex-row justify-content-start gap-4 my-auto">
                    <MudText Class="my-auto">@_currentUser.UserName</MudText>
                    <MudText Class="my-auto">@_currentUser.Role</MudText>
                    <MudText>@_currentUser.Database ( @AppSettings.Databases[_currentUser.Database] ) </MudText>
                </MudItem>
            </MudAppBar>
            <MudDrawer @bind-Open="@_drawerOpen">
                <NavMenu />
            </MudDrawer>
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="px-10 py-7">
                    @Body
                </MudContainer>
            </MudMainContent>
        </Authorized>
        <NotAuthorized>
            <MudAppBar>
                <MudText Style="font-weight: 500; padding-left: 35px;color: white;font-size:20px;">Granite Express</MudText>
            </MudAppBar>
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="px-10 py-7">
                    @Body
                </MudContainer>
            </MudMainContent>
        </NotAuthorized>
    </AuthorizeView>
</MudLayout>

@code {
    private MudTheme _theme = new();
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var state = await _authStateProvider.GetAuthenticationStateAsync();
                var user = state.User;
                if (user is not null && user.Identity.IsAuthenticated)
                {
                    var userId = user.GetUserId();
                    var userName = user.GetUserName();
                    _currentUser.SetState(userId, userName);
                }
            }
            catch
            {

            }
        }
    }

    private async Task Logout()
    {
        await ((AuthStateProvider)_authStateProvider).ClearStateAsync();
        _navigationManager.NavigateTo("login", true);
    }
}