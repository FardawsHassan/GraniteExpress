@using Microsoft.AspNetCore.Identity
@attribute [AllowAnonymous]
@inject IUserService _userService

<MudDialog>
    <DialogContent>
        <MudItem xs="12" Class="d-flex flex-column gap-3 mx-4 pa-5">
            <MudSelect Class="pb-4" @bind-Value=_register.Role Label="Roles" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach (var role in Roles)
                {
                    <MudSelectItem Value="@role.Name">@role.Name</MudSelectItem>
                }
            </MudSelect>
            <MudButton Color="Color.Primary" Class="py-2 px-6 mt-1" Variant="Variant.Filled" OnClick="Submit"><MudText Typo="Typo.body2">Save</MudText></MudButton>
        </MudItem>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private AddUserRequest _register { get; set; } = new();
    List<IdentityRole> Roles = new();

    private bool isShowPassword { get; set; } = false;
    private InputType Password = InputType.Password;
    private string PasswordIcon = Icons.Material.Filled.VisibilityOff;

    private bool isShowConfirmPassword { get; set; } = false;
    private InputType ConfirmPassword = InputType.Password;
    private string ConfirmPasswordIcon = Icons.Material.Filled.VisibilityOff;

    private List<string> _errorMessage { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Roles = await _userService.GetRoles();
    }


    private void ShowPassword()
    {
        @if (isShowPassword)
        {
            isShowPassword = false;
            PasswordIcon = Icons.Material.Filled.VisibilityOff;
            Password = InputType.Password;
        }
        else
        {
            isShowPassword = true;
            PasswordIcon = Icons.Material.Filled.Visibility;
            Password = InputType.Text;
        }
    }

    private void ShowConfirmPassword()
    {
        @if (isShowConfirmPassword)
        {
            isShowConfirmPassword = false;
            ConfirmPasswordIcon = Icons.Material.Filled.VisibilityOff;
            ConfirmPassword = InputType.Password;
        }
        else
        {
            isShowConfirmPassword = true;
            ConfirmPasswordIcon = Icons.Material.Filled.Visibility;
            ConfirmPassword = InputType.Text;
        }
    }

    private async Task Submit()
    {
        try
        {
            var response = await _userService.AddUser(_register);
            if (response is not null)
            {
                _snakBar.Add("User added successfully", Severity.Success);
                MudDialog.Close(DialogResult.Ok(response));
            }
            else
            {
                _snakBar.Add("Something went wrong", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            _snakBar.Add(ex.Message, Severity.Error);
        }
    }
}