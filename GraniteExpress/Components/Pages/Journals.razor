@page "/transaction"
@using GraniteExpress.Helper
@inject IJournalService _journalService
@inject IAccountService _AccountService
@inject ICurrencyService _currencyService
@inject IClientService _clientService
@inject IDocumentService _documentService
@inject ITemplateService _templateService
@inject ICashFlowService _cashFlowService
@attribute [Authorize]

<PageTitle>Transaction</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h4" Class="">Journals</MudText>
    </MudItem>
    <MudItem xs="12" Class="mb-4">
        <EditForm Model="@Journal" OnValidSubmit="@OnValidSubmit">
            <DataAnnotationsValidator />
            <MudItem Class="mt-4 mb-2 mr-2 d-flex justify-end">
                <MudButton Class="form-submit-btn" Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
            </MudItem>
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Journal.JournalDescription" Label="Description" Class="mt-4" Lines="3" Variant="Variant.Outlined" For="(() => Journal.JournalDescription)" Margin="Margin.Dense"></MudTextField>
                </MudItem>
            </MudGrid>
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField @bind-Value="Journal.DocumentNo" Label="Document Number" Variant="Variant.Outlined" Margin="Margin.Dense" For="(() => Journal.DocumentNo)"></MudTextField>
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker Color="Color.Secondary" Variant="Variant.Outlined" Rounded="true" Margin="Margin.Dense" PickerVariant="PickerVariant.Inline" AutoClose="true" Label="Document Date" @bind-Date="journalDate" DateFormat="dd.MM.yyyy" Editable="true" Placeholder="Select Date" />
                </MudItem>
            </MudGrid>
            <MudGrid>
                <MudItem xs="4" @onclick=@(() => OpenDocumentTypeSelectDialog())>
                    @{
                        <MudTextField @ref=@_documentTypeField Error="@documentTypeError" ErrorText="Document Type is required" Label="Select Document Type" Variant=Variant.Outlined Value="@(" ")" ReadOnly Margin="Margin.Dense"></MudTextField>
                    }
                </MudItem>
                <MudItem xs="4" @onclick=@(() => OpenTemplateSelectDialog())>
                    @{
                        <MudTextField Label="Select Template" @ref=@_TemplateField Variant=Variant.Outlined Value="@(" ")" ReadOnly Margin="Margin.Dense"></MudTextField>
                    }
                </MudItem>
                <MudItem xs="4" Style="min-height:40px;" @onclick=@(() => OpenJournalClientSelectDialog())>
                    @{
                        <MudTextField Error="@clientError" @ref=@_JournalClientField ErrorText="Client is required" Label="Select Client" Variant=Variant.Outlined Value="@(" ")" ReadOnly Margin="Margin.Dense"></MudTextField>
                    }
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>
    <MudItem xs="12">
        <MudTable Bordered=true Outlined Square=false CustomFooter=true FooterClass="table-foot-bordered" Items="Journal.JournalDetail" @ref=JournalDetailTable Class="mt-2" FixedHeader Dense>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Account Code</MudTh>
                <MudTh>Account Name</MudTh>
                <MudTh>Currency Type</MudTh>
                <MudTh>Client Code</MudTh>
                <MudTh>Client Name</MudTh>
                <MudTh>Exchange Rate</MudTh>
                <MudTh>Currency Amount</MudTh>
                <MudTh>Is Debit</MudTh>
                <MudTh>Debit Amount</MudTh>
                <MudTh>Credit Amount</MudTh>
                <MudTh>Cash Flow</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudItem>
                        @if (Journal.JournalDetail.Last() != context)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick=@(() => RemoveRow(context))></MudIconButton>
                        }
                    </MudItem>
                </MudTd>
                <MudTd DataLabel="Account Code">
                    <MudItem Style="min-height:40px;" @onclick=@(() => OpenAccountSelectDialog(context))>
                        @{
                            var account = Accounts.Where(x => x.AccountId == context.AccountId).FirstOrDefault();
                            <MudTextField Value="@(account is not null ? account.AccountCode: " ")" ReadOnly Margin="Margin.Dense"></MudTextField>
                        }
                    </MudItem>
                </MudTd>
                <MudTd DataLabel="Account name">
                    <MudItem Style="min-height:40px;" @onclick=@(() => OpenAccountSelectDialog(context))>
                        @{
                            var account = Accounts.Where(x => x.AccountId == context.AccountId).FirstOrDefault();
                            <MudTextField Value="@(account is not null ? account.AccountName: " ")" ReadOnly Margin="Margin.Dense"></MudTextField>
                        }
                    </MudItem>
                </MudTd>
                <MudTd DataLabel="Currency Type">
                    <MudItem>
                        @{
                            var account = Accounts.Where(x => x.AccountId == context.AccountId).FirstOrDefault();
                            if (account is not null)
                            {
                                var currency = Currencies.Where(x => x.CurrencyId == account.CurrencyId).FirstOrDefault();

                                if (currency is not null)
                                {
                                    <MudTextField Value="@currency.CurrencyCode" ReadOnly Margin="Margin.Dense"></MudTextField>
                                }
                            }
                            else
                            {
                                <MudTextField Value=@(" ") ReadOnly Margin="Margin.Dense"></MudTextField>
                            }
                        }
                    </MudItem>
                </MudTd>
                <MudTd DataLabel="Client Code">
                    <MudItem Style="min-height:40px;" @onclick=@(() => OpenClientSelectDialog(context))>
                        @{
                            var client = Clients.Where(x => x.ClientId == context.ClientId).FirstOrDefault();
                            <MudTextField Value="@(client is not null ? client.ClientCode : " ")" ReadOnly Margin="Margin.Dense"></MudTextField>
                        }
                    </MudItem>
                </MudTd>
                <MudTd DataLabel="Client Name">
                    <MudItem Style="min-height:40px;" @onclick=@(() => OpenClientSelectDialog(context))>
                        @{
                            var client = Clients.Where(x => x.ClientId == context.ClientId).FirstOrDefault();
                            <MudTextField Value="@(client is not null ? client.ClientFirstName + " " + client.ClientLastName : " ")" ReadOnly Margin="Margin.Dense"></MudTextField>
                        }
                    </MudItem>
                </MudTd>
                <MudTd DataLabel="Exchange Rate">
                    <MudItem>
                        @{
                            var account = Accounts.Where(x => x.AccountId == context.AccountId).FirstOrDefault();
                            if (account is not null)
                            {
                                var currency = Currencies.Where(x => x.CurrencyId == account.CurrencyId).FirstOrDefault();

                                if (currency is not null)
                                {
                                    if (context.ExchangeRate is null)
                                    {
                                        context.ExchangeRate = currency.DefaultValue;
                                    }
                                    <MudTextField Style="border: none !important;" ReadOnly=@(currency.CurrencyCode.ToLower() == "mnt") @bind-Value="@context.ExchangeRate" Margin="Margin.Dense" For="(() => context.ExchangeRate)"></MudTextField>
                                }
                            }
                            else
                            {
                                <MudTextField Value=@(" ") ReadOnly Margin="Margin.Dense"></MudTextField>
                            }
                        }
                    </MudItem>
                </MudTd>
                <MudTd DataLabel="Currency Amount">
                    <MudItem>
                        <MudTextField @bind-Value="@context.CurrencyAmount" Margin="Margin.Dense" For="(() => context.CurrencyAmount)"></MudTextField>
                    </MudItem>
                </MudTd>
                <MudTd DataLabel="Is Debit">
                    <MudItem>
                        <MudCheckBox @bind-Value=context.IsDebit Color="Color.Primary"></MudCheckBox>
                    </MudItem>
                </MudTd>
                <MudTd DataLabel="Debit Amount">
                    @if (context.IsDebit)
                    {
                        <MudItem>
                            <MudTextField Value="@(context.ExchangeRate*context.CurrencyAmount)" ReadOnly Margin="Margin.Dense"></MudTextField>
                        </MudItem>
                    }
                </MudTd>
                <MudTd DataLabel="Credit Amount">
                    @if (!context.IsDebit)
                    {
                        <MudItem>
                            <MudTextField Value="@(context.ExchangeRate*context.CurrencyAmount)" ReadOnly Margin="Margin.Dense"></MudTextField>
                        </MudItem>
                    }
                </MudTd>
                <MudTd DataLabel="Cash Flow">
                    <MudItem Style="min-height:40px;" @onclick=@(() => OpenCashFlowSelectDialog(context))>
                        @{
                            var cashFlow = CashFlows.Where(x => x.CashFlowId == context.CashFlowId).FirstOrDefault();
                            <MudTextField Value="@(cashFlow is not null ? cashFlow.CashFlowDescription : " ")" ReadOnly Margin="Margin.Dense"></MudTextField>
                        }
                    </MudItem>
                </MudTd>
            </RowTemplate>
            <FooterContent>
                <MudTFootRow>
                    <MudTd colspan="9"><MudText Class="pa-3">Total</MudText></MudTd>
                    <MudTd>
                        <MudText Align="Align.Center">
                            @(Journal.JournalDetail.Where(x => x.IsDebit == true).Sum(s => s.CurrencyAmount * s.ExchangeRate))
                        </MudText>
                    </MudTd>
                    <MudTd>
                        <MudText Align="Align.Center">
                            @(Journal.JournalDetail.Where(x => x.IsDebit == false).Sum(s => s.CurrencyAmount * s.ExchangeRate))
                        </MudText>
                    </MudTd>
                    <MudTd></MudTd>
                </MudTFootRow>
            </FooterContent>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{50, 100}" />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>


<style>
    .mud-input.mud-input-underline::after {
        border-bottom: none;
    }

    .mud-input.mud-input-underline::before {
        border-bottom: none;
    }

    .mud-input.mud-input-underline:hover:not(.mud-disabled)::before {
        border-bottom: none;
    }

    .mud-input-control > .mud-input-control-input-container > div.mud-input.mud-input-text {
        margin-top: 0 !important;
    }

    .mud-table-dense * .mud-table-row td.mud-table-cell {
        padding: 0 !important;
        padding-inline-start: 0 !important;
        padding-inline-end: 0 !important;
    }

    .mud-table-cell .mud-input > input.mud-input-root {
        height: 45px !important;
        padding: 0 !important;
        text-align: center;
    }
    
    th{
        text-align: center !important;
        padding: 10px !important;
    }

    .mud-table-cell .mud-checkbox {
        margin: auto;
    }
</style>

@code {
    public List<JournalDto> JournalList = new List<JournalDto>();
    private DialogOptions _dialogOption = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, CloseButton = true };

    public JournalDto Journal { get; set; } = new();
    public AccountDto SelectedAccount { get; set; } = new();

    List<DocumentTypeDto> DocumentTypes = new();
    List<TemplateDto> Templates = new();
    List<AccountDto> Accounts = new();
    List<ClientDto> Clients = new();
    List<CurrencyDto> Currencies = new();
    List<CashFlowDto> CashFlows = new();

    MudTable<JournalDetailDto> JournalDetailTable = new();
    MudTextField<string> _documentTypeField = new();
    MudTextField<string> _TemplateField = new();
    MudTextField<string> _JournalClientField = new();
    public DateTime? journalDate = DateTime.UtcNow;
    bool clientError = false;
    bool documentTypeError = false;

    protected override async Task OnInitializedAsync()
    {
        Accounts = await _AccountService.GetAccounts();
        Currencies = await _currencyService.GetCurrencies();
        Clients = await _clientService.GetClients();
        DocumentTypes = await _documentService.GetDocumentTypes();
        Templates = await _templateService.GetTemplates();
        CashFlows = await _cashFlowService.GetCashFlows();
        journalDate = DateTime.UtcNow;
        Journal = new();
        Journal.UserId = "tempId";
        // Journal.UserId = _currentUser.UserId;
        Journal.JournalDetail = new();
        Journal.JournalDetail.Add(new());
    }


    private async Task OnValidSubmit(EditContext context)
    {
        Journal.UserId = await _localStorageService.GetItemAsync<string>(key: "AuthKey");
        Journal.DocumentDate = journalDate ?? DateTime.UtcNow;
        var lastJournal = Journal.JournalDetail.Last();
        Journal.JournalDetail.Remove(lastJournal);
        bool isValid = context.Validate();
        if (isValid)
        {
            clientError = Journal.ClientId == 0;
            documentTypeError = Journal.DocumentTypeId == 0;

            if (!(clientError || documentTypeError))
            {
                var debitAmount = Journal.JournalDetail.Where(x => x.IsDebit == true).Sum(s => s.CurrencyAmount * s.ExchangeRate);
                var creditAmount = Journal.JournalDetail.Where(x => x.IsDebit == false).Sum(s => s.CurrencyAmount * s.ExchangeRate);
                if (debitAmount == creditAmount)
                {
                    var cloneJournal = CloneInstance.Clone<JournalDto>(Journal);
                    var response = await _journalService.SaveJournal(cloneJournal);
                    if (response is true)
                    {
                        await OnInitializedAsync();
                        StateHasChanged();
                       _snakBar.Add("Transaction Added Succesfully.", Severity.Success);
                    }
                    else
                    {
                        _snakBar.Add("Something went wrong.", Severity.Error);
                    }
                }
                else
                {
                    _snakBar.Add("Debit and Credit amount are not equal.", Severity.Error);
                    Journal.JournalDetail.Add(lastJournal);
                }
            }
            else
            {
                Journal.JournalDetail.Add(lastJournal);
            }
        }
    }

    private async Task OpenAccountSelectDialog(JournalDetailDto journalDetail)
    {
        var dialog = _dialog.Show<AccountDialog>("Select Account", _dialogOption);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var account = result.Data as AccountDto;
            JournalDetailTable.SelectedItem.AccountId = account.AccountId;

            if (journalDetail == Journal.JournalDetail.Last())
            {
                Journal.JournalDetail.Add(new());
            }
            StateHasChanged();
        }

    }

    // private async Task OnEnterOpenAccountDialog(JournalDetail journalDetail, KeyboardEventArgs e)
    // {
    //     if (e.Code == "Enter" || e.Code == "NumpadEnter")
    //     {
    //         var dialog = _dialog.Show<AccountDialog>("Select Account", _dialogOption);
    //         var result = await dialog.Result;

    //         if (!result.Canceled)
    //         {
    //             var account = result.Data as Account;
    //             JournalDetailTable.SelectedItem.AccountId = account.AccountId;

    //             if (journalDetail == Journal.JournalDetail.Last())
    //             {
    //                 Journal.JournalDetail.Add(new());
    //             }
    //             StateHasChanged();
    //         }
    //     }
    // }

    // private async Task OnEnterOpenClientDialog(KeyboardEventArgs e)
    // {
    //     if (e.Code == "Enter" || e.Code == "NumpadEnter")
    //     {
    //         var dialog = _dialog.Show<ClientDialog>("Select Client", _dialogOption);
    //         var result = await dialog.Result;

    //         if (!result.Canceled)
    //         {
    //             var client = result.Data as Client;
    //             JournalDetailTable.SelectedItem.ClientId = client.ClientId;
    //             StateHasChanged();
    //         }
    //     }
    // }

    private async Task OpenClientSelectDialog(JournalDetailDto journalDetail)
    {
        var dialog = _dialog.Show<ClientDialog>("Select Client", _dialogOption);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var client = result.Data as ClientDto;
            JournalDetailTable.SelectedItem.ClientId = client.ClientId;
        }
        StateHasChanged();
    }


    private async Task OpenCashFlowSelectDialog(JournalDetailDto journalDetail)
    {
        var dialog = _dialog.Show<AddCashFlowDialog>("Select Cash Flow", _dialogOption);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var cashFlow = result.Data as CashFlowDto;
            JournalDetailTable.SelectedItem.CashFlowId = cashFlow.CashFlowId;
        }
        StateHasChanged();
    }

    private async Task OpenJournalClientSelectDialog()
    {
        var dialog = _dialog.Show<ClientDialog>("Select Client", _dialogOption);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var client = result.Data as ClientDto;
            Journal.ClientId = client.ClientId;
            clientError = false;
            await _JournalClientField.SetText(client.ClientFirstName+" "+client.ClientLastName);
        }
        StateHasChanged();
    }


    private async Task OpenDocumentTypeSelectDialog()
    {
        var dialog = _dialog.Show<DocumentTypeDialog>("Select Document Type", _dialogOption);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var documentType = result.Data as DocumentTypeDto;
            Journal.DocumentTypeId = documentType.DocumentTypeId;
            documentTypeError = false;
            await _documentTypeField.SetText(documentType.DocumentName);
        }
        StateHasChanged();
    }

    private async Task OpenTemplateSelectDialog()
    {
        var dialog = _dialog.Show<TemplateDialog>("Select Template", _dialogOption);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var template = result.Data as TemplateDto;
            Journal.TemplateId = template.TemplateId;
            var lastJournalDetail = Journal.JournalDetail.Last();
            Journal.JournalDetail.Remove(lastJournalDetail);
            Journal.JournalDetail.AddRange(template.TemplateDetail.Select(x => new JournalDetailDto
                {
                    AccountId = x.AccountId,
                    IsDebit = x.IsDebit
                }));
            Journal.JournalDetail.Add(new());
            await _TemplateField.SetText(template.TemplateName);
        }
        StateHasChanged();
    }

    private void RemoveRow(JournalDetailDto journalDetail) => Journal.JournalDetail.Remove(journalDetail);
}
