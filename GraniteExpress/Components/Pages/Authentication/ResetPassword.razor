@page "/resetPassword/{id}"
@attribute [AllowAnonymous]
@inject IAuthenticationService _authService

<MudGrid Justify="Justify.Center">
    <MudPaper Class="d-flex flex-column gap-3 mx-4 mt-11" Square=false Style="min-height: 60vh;align-content: center;justify-content: center;padding: 90px 80px;">
        <MudText Style="font-size: 38px;font-weight: 500;text-align: center;" Typo="Typo.h3" Class="mb-7">Reset<br /> Password</MudText>
        <EditForm Model="@_resetPassword" OnValidSubmit="Submit" Enhance>
            <DataAnnotationsValidator />
            <MudTextField Class="pb-5" @bind-Value="_resetPassword.Password" HelperText="Should contain digit & alphanumeric characters" Immediate="true" Label="Password" Margin="Margin.Dense" Variant="Variant.Outlined" InputType="@Password" Adornment="Adornment.End" AdornmentIcon="@PasswordIcon" OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Show Password" For="() => _resetPassword.Password" />
            <MudTextField Class="pb-4" @bind-Value="_resetPassword.ConfirmPassword" Immediate="true" Label="Confirm Password" Margin="Margin.Dense" Variant="Variant.Outlined" InputType="@ConfirmPassword" Adornment="Adornment.End" AdornmentIcon="@ConfirmPasswordIcon" OnAdornmentClick="ShowConfirmPassword" AdornmentAriaLabel="Show Confirm Password" For="() => _resetPassword.ConfirmPassword" />
            @if (_errorMessage.Any())
            {
                @foreach (var message in _errorMessage)
                {
                    <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Class="my-2">@message</MudAlert>
                }
            }
            <MudItem xs="12">
                <MudLink Class="my-2" Underline="Underline.None" Href="/login">Back to Login</MudLink>
            </MudItem>
            <MudItem Class="d-flex justify-content-center">
                <MudButton Style="text-align: center;padding: 37px;margin-top: 18px !important;" Color="Color.Primary" Class="py-2 mt-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit"><MudText Typo="Typo.body2">Reset</MudText></MudButton>
            </MudItem>
        </EditForm>
    </MudPaper>
</MudGrid>


@code {
    [Parameter]
    public string id { get; set; } = string.Empty;
    [Parameter]
    [SupplyParameterFromQuery]
    public string token { get; set; } = string.Empty;

    private ResetPasswordRequest _resetPassword { get; set; } = new();
    private bool isShowPassword { get; set; } = false;
    private InputType Password = InputType.Password;
    private string PasswordIcon = Icons.Material.Filled.VisibilityOff;

    private bool isShowConfirmPassword { get; set; } = false;
    private InputType ConfirmPassword = InputType.Password;
    private string ConfirmPasswordIcon = Icons.Material.Filled.VisibilityOff;

    private List<string> _errorMessage { get; set; } = new();

    private void ShowPassword()
    {
        @if (isShowPassword)
        {
            isShowPassword = false;
            PasswordIcon = Icons.Material.Filled.VisibilityOff;
            Password = InputType.Password;
        }
        else
        {
            isShowPassword = true;
            PasswordIcon = Icons.Material.Filled.Visibility;
            Password = InputType.Text;
        }
    }

    private void ShowConfirmPassword()
    {
        @if (isShowConfirmPassword)
        {
            isShowConfirmPassword = false;
            ConfirmPasswordIcon = Icons.Material.Filled.VisibilityOff;
            ConfirmPassword = InputType.Password;
        }
        else
        {
            isShowConfirmPassword = true;
            ConfirmPasswordIcon = Icons.Material.Filled.Visibility;
            ConfirmPassword = InputType.Text;
        }
    }

    private async Task Submit()
    {
        try
        {
            var response = await _authService.ResetPassword(_resetPassword, id, token);
            if (response.IsSuccess)
            {
                _errorMessage.Clear();
                _snakBar.Add(response.Message, Severity.Success);
                _navigator.NavigateTo("/login");
            }
            else
            {
                _errorMessage = response.Message?.Split("/n").ToList();
            }
        }
        catch (Exception ex)
        {
            _snakBar.Add(ex.Message, Severity.Error);
        }
    }
}
