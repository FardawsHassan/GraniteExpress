@page "/login"
@using GraniteExpress.Components.Layout
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject IAuthenticationService _authService
@inject IUserService _userService
@inject NavigationManager _navigationManager

<MudGrid Justify="Justify.Center">
    <MudPaper Class="d-flex flex-column gap-3 mx-4 mt-10" Square=false Style="min-height: 60vh;align-content: center;justify-content: center;padding: 100px 85px;">
        <MudText Style="font-size: 38px;font-weight: 500;text-align: center;" Typo="Typo.h3" Class="mb-7">Log In</MudText>
        <EditForm Model="@_login" OnValidSubmit="Submit" Enhance>
            <DataAnnotationsValidator />
            <MudItem>
                <MudTextField Class="pb-5" @bind-Value="_login.Email" Immediate="true" Label="Email" Variant="Variant.Outlined" Margin="Margin.Dense" For="() => _login.Email" />
                <MudTextField Class="pb-4" @bind-Value="_login.Password" Immediate="true" Label="Password" Margin="Margin.Dense" Variant="Variant.Outlined" InputType="@Password" Adornment="Adornment.End" AdornmentIcon="@PasswordIcon" OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Show Password" For="() => _login.Password" />
                <MudSelect Margin="Margin.Dense" Class="pb-4" Placeholder="Select Database" @bind-Value="Database" Required Variant="Variant.Outlined">
                    @foreach (var database in AppSettings.Databases)
                    {
                        <MudSelectItem Value="@database.Key">@database.Value</MudSelectItem>

                    }
                </MudSelect>
                @if (_errorMessage.Any())
                {
                    @foreach (var message in _errorMessage)
                    {
                        <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Class="my-2">@message</MudAlert>
                    }
                }
                <MudItem xs="12">
                    <MudLink Class="my-2" Underline="Underline.None" Href="/forgot/password">Forgot Password!</MudLink>
                </MudItem>
                <MudItem Class="d-flex justify-content-center">
                    <MudButton Style="text-align: center;padding: 37px;margin-top: 18px !important;" Color="Color.Primary" Class="py-2 mt-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit"><MudText Typo="Typo.body2">Login</MudText></MudButton>
                </MudItem>
            </MudItem>
        </EditForm>
    </MudPaper>
</MudGrid>

@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    private LoginRequest _login { get; set; } = new();
    private bool isShowPassword { get; set; } = false;
    private InputType Password = InputType.Password;
    private string PasswordIcon = Icons.Material.Filled.VisibilityOff;
    private string Database = string.Empty;

    private List<string> _errorMessage { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = (await AuthState).User;
            if (user is not null && user.Identity is not null && user.Identity.IsAuthenticated)
            {
                _navigationManager.NavigateTo("/", true);
            }
        }
        catch
        {

        }
    }

    private void ShowPassword()
    {
        @if (isShowPassword)
        {
            isShowPassword = false;
            PasswordIcon = Icons.Material.Filled.VisibilityOff;
            Password = InputType.Password;
        }
        else
        {
            isShowPassword = true;
            PasswordIcon = Icons.Material.Filled.Visibility;
            Password = InputType.Text;
        }
    }

    private async Task Submit()
    {
        try
        {
            if (!string.IsNullOrEmpty(Database))
            {
                await _localStorageService.SetItemAsync<string>(key: "Database", data: Database);
                _currentUser.SetDatabase(Database);
                var response = await _authService.Login(_login);
                if (response.IsSuccess)
                {
                    await ((AuthStateProvider)_authStateProvider).SetStateAsync(response.UserId);
                    _errorMessage.Clear();
                    _navigationManager.NavigateTo("/");
                }
                else
                {
                    _errorMessage = response.Message?.Split("/n").ToList();
                }
            }
            else
            {
                _snakBar.Add("Please Select a Database", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            _snakBar.Add(ex.Message, Severity.Error);
        }
    }
}
