@page "/login"
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject IAuthenticationService _authService
@inject IUserService _userService
@inject NavigationManager _navigationManager

<MudGrid>
    <MudItem xs="12" sm="6" md="4" lg="3" xl=2 Class="d-flex flex-column gap-3 mx-4">
        <MudText Style="font-size: 38px;" Typo="Typo.h3" Class="mb-2">Log In</MudText>
        <EditForm Model="@_login" OnValidSubmit="Submit" Enhance>
            <DataAnnotationsValidator />
            <MudItem>
                <MudTextField Class="pb-4" @bind-Value="_login.Email" Immediate="true" Label="Email" Variant="Variant.Outlined" Margin="Margin.Dense" For="() => _login.Email" />
                <MudTextField Class="pb-4" @bind-Value="_login.Password" Immediate="true" Label="Password" Margin="Margin.Dense" Variant="Variant.Outlined" InputType="@Password" Adornment="Adornment.End" AdornmentIcon="@PasswordIcon" OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Show Password" For="() => _login.Password" />
                @if (_errorMessage.Any())
                {
                    @foreach (var message in _errorMessage)
                    {
                        <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Class="my-2">@message</MudAlert>
                    }
                }
                <MudButton Color="Color.Primary" Class="py-2 mt-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit"><MudText Typo="Typo.body2">Login</MudText></MudButton>
            </MudItem>
        </EditForm>
        @* <MudLink Underline="Underline.None" Href="/register">Register here!</MudLink> *@
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    private LoginRequest _login { get; set; } = new();
    private bool isShowPassword { get; set; } = false;
    private InputType Password = InputType.Password;
    private string PasswordIcon = Icons.Material.Filled.VisibilityOff;

    private List<string> _errorMessage { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = (await AuthState).User;
            if (user is not null && user.Identity is not null && user.Identity.IsAuthenticated)
            {
                _navigationManager.NavigateTo("/");
            }
        }
        catch
        {

        }
    }

    private void ShowPassword()
    {
        @if (isShowPassword)
        {
            isShowPassword = false;
            PasswordIcon = Icons.Material.Filled.VisibilityOff;
            Password = InputType.Password;
        }
        else
        {
            isShowPassword = true;
            PasswordIcon = Icons.Material.Filled.Visibility;
            Password = InputType.Text;
        }
    }

    private async Task Submit()
    {
        try
        {
            var response = await _authService.Login(_login);
            if (response.IsSuccess)
            {
                await ((AuthStateProvider)_authStateProvider).SetStateAsync(response.UserId);
                _errorMessage.Clear();
                _navigationManager.NavigateTo("/transaction");
            }
            else
            {
                _errorMessage = response.Message?.Split("/n").ToList();
            }
        }
        catch (Exception ex)
        {
            _snakBar.Add(ex.Message, Severity.Error);
        }
    }
}
