@page "/register"

@attribute [AllowAnonymous]
@inject IAuthenticationService _authService

<MudGrid>
    <MudItem xs="12" sm="6" md="4" lg="3" xl=2 Class="d-flex flex-column gap-3 mx-4">
        <MudText Style="font-size: 38px;" Typo="Typo.h3" Class="mb-2">Register</MudText>
        <EditForm Model="@_register" OnValidSubmit="Submit" Enhance>
            <DataAnnotationsValidator />
            <MudTextField Class="pb-4" @bind-Value="_register.Email" Immediate="true" Label="Email" Variant="Variant.Outlined" Margin="Margin.Dense" For="() => _register.Email" />
            <MudTextField Class="pb-4" @bind-Value="_register.Password" HelperText="Password should contain digit & alphanumeric characters" Immediate="true" Label="Password" Margin="Margin.Dense" Variant="Variant.Outlined" InputType="@Password" Adornment="Adornment.End" AdornmentIcon="@PasswordIcon" OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Show Password" For="() => _register.Password" />
            <MudTextField Class="pb-4" @bind-Value="_register.ConfirmPassword" Immediate="true" Label="Confirm Password" Margin="Margin.Dense" Variant="Variant.Outlined" InputType="@ConfirmPassword" Adornment="Adornment.End" AdornmentIcon="@ConfirmPasswordIcon" OnAdornmentClick="ShowConfirmPassword" AdornmentAriaLabel="Show Confirm Password" For="() => _register.ConfirmPassword" />
            @if (_errorMessage.Any())
            {
                @foreach (var message in _errorMessage)
                {
                    <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Class="mb-4">@message</MudAlert>
                }
            }
            <MudButton Color="Color.Primary" Class="py-2 px-6 mt-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit"><MudText Typo="Typo.body2">Register</MudText></MudButton>
        </EditForm>
        <MudLink Underline="Underline.None" Href="/login">Log in here!</MudLink>
    </MudItem>
</MudGrid>

@code {
    private RegisterRequest _register { get; set; } = new();
    private bool isShowPassword { get; set; } = false;
    private InputType Password = InputType.Password;
    private string PasswordIcon = Icons.Material.Filled.VisibilityOff;

    private bool isShowConfirmPassword { get; set; } = false;
    private InputType ConfirmPassword = InputType.Password;
    private string ConfirmPasswordIcon = Icons.Material.Filled.VisibilityOff;

    private List<string> _errorMessage { get; set; } = new();

    private void ShowPassword()
    {
        @if (isShowPassword)
        {
            isShowPassword = false;
            PasswordIcon = Icons.Material.Filled.VisibilityOff;
            Password = InputType.Password;
        }
        else
        {
            isShowPassword = true;
            PasswordIcon = Icons.Material.Filled.Visibility;
            Password = InputType.Text;
        }
    }

    private void ShowConfirmPassword()
    {
        @if (isShowConfirmPassword)
        {
            isShowConfirmPassword = false;
            ConfirmPasswordIcon = Icons.Material.Filled.VisibilityOff;
            ConfirmPassword = InputType.Password;
        }
        else
        {
            isShowConfirmPassword = true;
            ConfirmPasswordIcon = Icons.Material.Filled.Visibility;
            ConfirmPassword = InputType.Text;
        }
    }

    private async Task Submit()
    {
        try
        {
            var response = await _authService.Register(_register);
            if (response.IsSuccess)
            {
                _errorMessage.Clear();
            }
            else
            {
                _errorMessage = response.Message?.Split("/n").ToList();
            }
        }
        catch(Exception ex)
        {
            _snakBar.Add(ex.Message, Severity.Error);
        }
    }
}