@page "/changePassword"
@inject IAuthenticationService _authService
@attribute [Authorize]


<MudItem xs="12" sm="6" md="4" lg="3" xl=2 Class="d-flex flex-column gap-3 mx-4">
    <MudText Style="font-size: 32px;font-weight: 500;width: 100%" Typo="Typo.h3" Class="mb-2">Change Password</MudText>
    <EditForm Model="@_changePassword" OnValidSubmit="Submit" Enhance>
        <DataAnnotationsValidator />

        <MudTextField Class="pb-4" @bind-Value="_changePassword.Password" Immediate="true" Label="Current Password" Margin="Margin.Dense" Variant="Variant.Outlined" InputType="@Password" Adornment="Adornment.End" AdornmentIcon="@PasswordIcon" OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Show Password" For="() => _changePassword.Password" />
        <MudTextField Class="pb-4" @bind-Value="_changePassword.NewPassword" HelperText="Should contain digit & alphanumeric characters" Immediate="true" Label="New Password" Margin="Margin.Dense" Variant="Variant.Outlined" InputType="@NewPassword" Adornment="Adornment.End" AdornmentIcon="@NewPasswordIcon" OnAdornmentClick="ShowNewPassword" AdornmentAriaLabel="Show Password" For="() => _changePassword.NewPassword" />
        <MudTextField Class="pb-4" @bind-Value="_changePassword.ConfirmPassword" Immediate="true" Label="Confirm Password" Margin="Margin.Dense" Variant="Variant.Outlined" InputType="@ConfirmPassword" Adornment="Adornment.End" AdornmentIcon="@ConfirmPasswordIcon" OnAdornmentClick="ShowConfirmPassword" AdornmentAriaLabel="Show Confirm Password" For="() => _changePassword.ConfirmPassword" />
        @if (_errorMessage.Any())
        {
            @foreach (var message in _errorMessage)
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Class="my-2">@message</MudAlert>
            }
        }
        <MudButton Color="Color.Primary" Class="py-2 mt-1" Variant="Variant.Filled" ButtonType="ButtonType.Submit"><MudText Typo="Typo.body2">Save</MudText></MudButton>
    </EditForm>
</MudItem>

@code {
    [Parameter]
    public string id { get; set; } = string.Empty;

    private ChangePasswordRequest _changePassword { get; set; } = new();

    private bool isShowPassword { get; set; } = false;
    private InputType Password = InputType.Password;
    private string PasswordIcon = Icons.Material.Filled.VisibilityOff;
    
    private bool isShowNewPassword { get; set; } = false;
    private InputType NewPassword = InputType.Password;
    private string NewPasswordIcon = Icons.Material.Filled.VisibilityOff;

    private bool isShowConfirmPassword { get; set; } = false;
    private InputType ConfirmPassword = InputType.Password;
    private string ConfirmPasswordIcon = Icons.Material.Filled.VisibilityOff;

    private List<string> _errorMessage { get; set; } = new();

    private void ShowPassword()
    {
        @if (isShowPassword)
        {
            isShowPassword = false;
            PasswordIcon = Icons.Material.Filled.VisibilityOff;
            Password = InputType.Password;
        }
        else
        {
            isShowPassword = true;
            PasswordIcon = Icons.Material.Filled.Visibility;
            Password = InputType.Text;
        }
    }
    
    private void ShowNewPassword()
    {
        @if (isShowNewPassword)
        {
            isShowNewPassword = false;
            NewPasswordIcon = Icons.Material.Filled.VisibilityOff;
            NewPassword = InputType.Password;
        }
        else
        {
            isShowNewPassword = true;
            NewPasswordIcon = Icons.Material.Filled.Visibility;
            NewPassword = InputType.Text;
        }
    }

    private void ShowConfirmPassword()
    {
        @if (isShowConfirmPassword)
        {
            isShowConfirmPassword = false;
            ConfirmPasswordIcon = Icons.Material.Filled.VisibilityOff;
            ConfirmPassword = InputType.Password;
        }
        else
        {
            isShowConfirmPassword = true;
            ConfirmPasswordIcon = Icons.Material.Filled.Visibility;
            ConfirmPassword = InputType.Text;
        }
    }

    private async Task Submit()
    {
        try
        {
            var response = await _authService.ChangePassword(_changePassword.Password, _changePassword.NewPassword);
            if (response.IsSuccess)
            {
                _errorMessage.Clear();
                _snakBar.Add(response.Message, Severity.Success);
            }
            else
            {
                _errorMessage = response.Message?.Split("/n").ToList();
            }
        }
        catch (Exception ex)
        {
            _snakBar.Add(ex.Message, Severity.Error);
        }
    }
}
